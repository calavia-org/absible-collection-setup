name: tox

on:
  pull_request:
      types: [opened, synchronize, reopened]
jobs:
  lint:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v4
        with:
          python-version: "3.10"
          cache: pip
      - name: run lint
        run: |
          pip install --upgrade pip
          python3 -m virtualenv .venv --python=${{ matrix.python-version }}
          source .venv/bin/activate

          python3 -m pip install -U tox-ansible
          python3 -m tox -e lint_all
          python3 -m tox -e sanity

  test:
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: py310
            tox_env: py310
            os: ubuntu-20.04
            python-version: "3.10"
    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: pip

      - name: ansible-test
        run: |
          pip install --upgrade pip
          python3 -m virtualenv .venv --python=${{ matrix.python-version }}
          source .venv/bin/activate

          python3 -m pip install tox-ansible
          python3 -m tox -e env
          python3 -m tox -e coverage

      - name: molecule
        run: |
          python3 -m pip install tox-ansible
          python3 -m tox
        env:
          TOX_SKIP_ENV: "coverage|env|integration|lint_all|sanity|shell|units"
          COVERAGE_FILE: .coverage.${{ matrix.python-version }}
  #     - name: upload artifacts
  #       uses: actions/upload-artifact@v2
  #       with:
  #         name: coverage-results
  #         path: .coverage.${{ matrix.python-version }}

  # # Disabled until we can really start working on adding support for tox4
  # # test-devel:
  # #   needs: lint
  # #   runs-on: ubuntu-20.04
  # #   strategy:
  # #     fail-fast: false
  # #     matrix:
  # #       python: ["3.6"]
  # #   steps:
  # #     - uses: actions/checkout@v2
  # #     - uses: actions/setup-python@v4
  # #       with:
  # #         python-version: ${{ matrix.python-version }}
  # #     - name: run test (devel)
  # #       run: |
  # #         python -m pip install tox
  # #         tox -e py$(printf "${{ matrix.version }}" | tr -d '.')-devel

  # coverage:
  #   needs: test
  #   runs-on: ubuntu-20.04
  #   steps:
  #     - uses: actions/checkout@v2
  #     - uses: actions/setup-python@v4
  #       with:
  #         python-version: "3.x"
  #         cache: pip
  #     - uses: actions/download-artifact@v2
  #       with:
  #         name: coverage-results
  #     - name: run coverage
  #       run: |
  #         python3 -m pip install tox codecov
  #         python3 -m tox -e coverage
  #         codecov -X pycov -X gcov
  #       env:
  #         CODECOV_TOKEN: ${{ secrets.codecov_token }}

  # publish:
  #   needs:
  #     - coverage
  #     - lint
  #     - packaging
  #   if: startsWith(github.ref, 'refs/tags/')  # Only release during tags
  #   runs-on: ubuntu-20.04

  #   env:
  #     PY_COLORS: 1
  #     TOXENV: packaging

  #   steps:
  #     - name: Check out src from Git
  #       uses: actions/checkout@v2
  #       with:
  #         # Get shallow Git history (default) for release events
  #         # but have a complete clone for any other workflows.
  #         # Both options fetch tags but since we're going to remove
  #         # one from HEAD in non-create-tag workflows, we need full
  #         # history for them.
  #         fetch-depth: >-
  #           ${{
  #             (
  #               (
  #                 github.event_name == 'create' &&
  #                 github.event.ref_type == 'tag'
  #               ) ||
  #               github.event_name == 'release'
  #             ) &&
  #             1 || 0
  #           }}
  #     - name: Switch to using Python 3.9 by default
  #       uses: actions/setup-python@v4
  #       with:
  #         python-version: "3.9"
  #         cache: pip
  #     - name: Install tox
  #       run: python3 -m pip install --user tox
  #     - name: Drop Git tags from HEAD for non-tag-create and non-release events
  #       if: >-
  #         (
  #           github.event_name != 'create' ||
  #           github.event.ref_type != 'tag'
  #         ) &&
  #         github.event_name != 'release'
  #       run: >-
  #         git tag --points-at HEAD
  #         |
  #         xargs git tag --delete
  #     - name: Build dists
  #       run: python3 -m tox
  #     - name: Publish to test.pypi.org
  #       if: >-
  #         (
  #           github.event_name == 'push' &&
  #           github.ref == format(
  #             'refs/heads/{0}', github.event.repository.default_branch
  #           )
  #         ) ||
  #         (
  #           github.event_name == 'create' &&
  #           github.event.ref_type == 'tag'
  #         )
  #       uses: pypa/gh-action-pypi-publish@release/v1
  #       with:
  #         password: ${{ secrets.testpypi_password }}
  #         repository_url: https://test.pypi.org/legacy/
  #     - name: Publish to pypi.org
  #       if: >-  # "create" workflows run separately from "push" & "pull_request"
  #         github.event_name == 'release'
  #       uses: pypa/gh-action-pypi-publish@release/v1
  #       with:
  #         password: ${{ secrets.pypi_password }}
